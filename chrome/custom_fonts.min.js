const template=get("template"),fontsDiv=get("fontsDiv"),fontNameInput=get("fontNameInput"),localNameInput=get("localNameInput"),urlInput=get("urlInput"),addButton=get("addButton"),infoLabel=get("infoLabel"),fontTest=get("fontTest"),templateDiv=template.content.querySelector("div");let displayedFonts=[];async function initializeCustomFontsPage(){const t=await sync.get([keyCustomFonts]);displayedFonts=[],(await injectCustomFonts(t.customFonts)).forEach(t=>{displayFont(t),displayedFonts.push(t.fontName)})}async function injectTemporaryCustomFont(t){let n=get("wudoohTempCustomFontsStyle");n||((n=document.createElement("style")).id="wudoohTempCustomFontsStyle",document.head.append(n)),n.innerHTML=CustomFont.injectCSS(t)}async function notifyAllTabsCustomFontsChanged(t){injectCustomFonts(t),(await tabs.queryAllTabs()).forEach(n=>{let e={reason:reasonInjectCustomFonts,customFonts:t};tabs.sendMessage(n.id,e)})}function displayFont(t){const n=t.fontName,e=t.localName,o=t.url,a=document.importNode(templateDiv,!0),l=a.children.namedItem("templateFontTitle"),s=a.getElementsByTagName("input"),u=s.namedItem("templateFontNameInput"),i=s.namedItem("templateUrlInput"),m=s.namedItem("templateLocalNameInput"),c=a.children.namedItem("templateDeleteButton"),d=a.children.namedItem("templateCheckIcon"),p=a.children.namedItem("templateErrorIcon"),y=a.children.namedItem("templateInfoText"),f=[a,l,u,i,m,c,d,p,y];function r(t){a.setAttribute("fontName",t)}r(n),d.style.display="none",p.style.display="none",u.value=n,i.value=o,m.value=e;const F=`-${t.fontName}`;async function I(t,n){const e=(await sync.get([keyCustomFonts])).customFonts,o=e.find(t=>t.fontName===a.getAttribute("fontName"));o[t]=n,e[e.indexOf(o)]=o,await sync.set({customFonts:e}),r(o.fontName),notifyAllTabsCustomFontsChanged(e),l.style.fontFamily=o.fontName}f.forEach(t=>t.id+=F),l.style.fontFamily=n,u.oninput=(()=>u.postDelayed(defaultDelay,()=>{I("fontName",u.value)})),i.oninput=(()=>i.postDelayed(defaultDelay,()=>{I("url",i.value)})),m.oninput=(()=>m.postDelayed(defaultDelay,()=>{I("localName",m.value)})),c.onclick=(async()=>{if(confirm(`Are you sure you want to delete font ${u.value}\nThis cannot be undone`)){const t=u.value,n=(await sync.get([keyCustomFonts])).customFonts.filter(n=>n.fontName!==t);await sync.set({customFonts:n}),notifyAllTabsCustomFontsChanged(n),displayedFonts=n.map(t=>t.fontName),a.parentNode.removeChild(a)}}),fontsDiv.appendChild(a)}function inputOnInput(){this.postDelayed(defaultDelay,()=>{const t=fontNameInput.value,n=urlInput.value,e=localNameInput.value;injectTemporaryCustomFont(new CustomFont(t,e,n)),fontTest.style.fontFamily=t,console.error(runtime.lastError.message)})}async function addButtonOnClick(){let t=fontNameInput.value,n=urlInput.value,e=localNameInput.value;if(""==t&&(t=null),""==n&&(n=null),""==e&&(e=null),!t)return infoLabel.style.display="block",void(infoLabel.innerText="Font Name cannot be empty!");if(!n&&!e)return infoLabel.style.display="block",void(infoLabel.innerText="URL and local cannot both be empty!");if(displayedFonts.contains(t)||allWudoohFonts.contains(t))return infoLabel.style.display="block",void(infoLabel.innerText="A font with this Font Name already exists!");infoLabel.innerText="";const o=(await sync.get([keyCustomFonts])).customFonts,a=new CustomFont(t,e,n);o.push(a),await sync.set({customFonts:o}),displayFont(a),displayedFonts.push(a.fontName),notifyAllTabsCustomFontsChanged(o),infoLabel.style.display="none",fontNameInput.value="",urlInput.value="",localNameInput.value=""}function customFontsAddListeners(){function t(t){"Enter"===t.code&&addButton.click()}document.addEventListener("DOMContentLoaded",initializeCustomFontsPage),fontNameInput.onkeypress=t,localNameInput.onkeypress=t,urlInput.onkeypress=t,fontNameInput.oninput=inputOnInput,localNameInput.oninput=inputOnInput,urlInput.oninput=inputOnInput,addButton.onclick=addButtonOnClick}customFontsAddListeners();